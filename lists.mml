export fn (
	fold(f, i, l)     len(l) == 0 ? i : fold(f, f(l[0], i), l[1:])
	foldr(f, i, l)    len(l) == 0 ? i : f(l[0], foldr(f, i, l[1:]))
	map(m, l)         fold(fn (c, r) [r..., m(c)], [], l)
	filter(p, l)      fold(fn (c, r) p(c) ? [r..., c] : r, [], l)
	first(p, l)       len(l) == 0 ? [] : p(l[0]) ? l : first(p, l[1:])
	contains(i, l)    len(first(fn (ii) ii == i, l)) > 0
	concat(l)         flat(l)
	concats(...l)     concat(l)
	flat(l)           flatDepth(1, l)
	flats(...l)       flat(l)
	uniq(eq, l)       fold(fn (c, u) len(filter(fn (i) eq(i, c), u)) == 0 ? [u..., c] : u, [], l)
	every(p, l)       fold(fn (i, r) r && p(i), true, l)
	some(p, l)        fold(fn (i, r) r || p(i), false, l)
	intersect(l0, l1) filter(fn (i0) some(fn (i1) i0 == i1, l1), l0)
	takeFrom(n, f)    n == 0 ? [] : [takeFrom(n - 1, f)..., f()]
	take(n, v)        takeFrom(n, fn () v)
)

export fn sort(less, l) len(l) == 0 ? [] : [
	(l[1:] -> filter(fn (i) !less(l[0], i)) -> sort(less))...
	l[0]
	(l[1:] -> filter(less(l[0])) -> sort(less))...
]

export fn group(n, l) fold(
	fn (i, g) len(g) == 0 || len(g[len(g) - 1]) == n ?
		[g..., [i]] :
		[g[:len(g) - 1]..., [g[len(g) - 1]..., i]]
	[]
	l
)

export fn indexes(l) fold(fn (_, i) [i..., len(i)], [], l)

export fn flatDepth(d, l) {
	if d == 0 {
		return l
	}

	return fold(fn (i, r) {
		if !isList(i) {
			return [r..., i]
		}

		let fi flatDepth(d - 1, i)
		return [r..., fi...]
	}, [], l)
}
