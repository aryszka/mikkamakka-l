use (
	. "lang"
	  "validateast"
	  "structs"
	  "lists"
	  "code"
	  "errors"
	  "codetree"
	  "strings"
	  "functions"
)

fn assortComments(ast) {
	let isComment is({name: or("line-comment", "block-comment")})
	let astStripped {
		ast...
		nodes: filter(functions.not(isComment), ast.nodes)
	}

	let comments {
		nodes: filter(isComment, ast.nodes)
		indexes: ast.nodes
			-> lists.indexes
			-> filter(fn (i) isComment(ast.nodes[i]))
	}

	return {ast: astStripped, comments: comments}
}

fn create(type, ast, ...props)
	structs.merges({type: type, ast: ast}, props...)

fn (
	commentLine(ast)         create("comment-line", ast, {text: ast.text})
	lineComment(ast)         create("line-comment", ast, {lines: map(parse, ast.nodes)})
	blockCommentContent(ast) create("block-comment-content", ast, {text: ast.text})
	blockComment(ast)        create("block-comment", ast, {content: parse(ast.nodes[0])})
)

let (
	intCode    create("int")
	floatCode  create("float")
	stringCode create("string")
	boolCode   create("bool")
)

fn (
	symbol(ast)        create("symbol", ast, {name: ast.text})
	spread(ast)        create("spread", ast, {value: parse(ast.nodes[0])})
	list(ast)          create("list", ast, {values: map(parse, ast.nodes), mutable: false})
	mutableList(ast)   {list(ast)..., mutable: true}
	expressionKey(ast) create("expression-key", ast, {value: parse(ast.nodes[0])})
)

fn (
	entry(ast)         create("entry", ast, {key: parse(ast.nodes[0]), value: parse(ast.nodes[1])})
	struct(ast)        create("struct", ast, {entries: map(parse, ast.nodes), mutable: false})
	mutableStruct(ast) {struct(ast)..., mutable: true}
	ret(ast)           create("ret", ast, len(ast.nodes) == 0 ? {} : {value: parse(ast.nodes[0])})
	checkRet(ast)      create("check-ret", ast, {value: parse(ast.nodes[0])})
)

fn (
	statementListOf(ast, nodes) create("statement-list", ast, {statements: map(parse, nodes)})
	statementList(ast)          statementListOf(ast, ast.nodes)
	collectParameter(ast)       parse(ast.nodes[0])
)

fn functionFact(ast, offset) {
	let (
		nodes           ast.nodes[offset:]
		last            len(nodes) - 1
		params          nodes[:last]
		lastParam       len(params) - 1
		hasCollectParam lastParam >= 0 && params[lastParam].name == "collect-parameter"
		fixedParams     hasCollectParam ? params[:lastParam] : params
	)

	return create("function", ast, {
		params:       fixedParams -> map(parse) -> map(structs.get("name"))
		collectParam: hasCollectParam ? parse(params[lastParam]).name : ""
		body:         parse(nodes[last])
		effect:       false
	})
}

fn (
	functionLiteral(ast) functionFact(ast, 0)
	effect(ast)          {functionFact(ast, 0)..., effect: true}
)

fn rangeExpression(ast) create(
	"range"
	ast
	{[ast.name == "range-from" ? "from" : "to"]: parse(ast.nodes[0])}
)

fn (
	symbolIndex(ast)     create("symbol-index", ast, {symbol: parse(ast.nodes[0])})
	expressionIndex(ast) parse(ast.nodes[0])
	rangeIndex(ast)      create("range", ast, map(parse, ast.nodes)...)
)

fn indexer(ast) {
	fn indexerNodes(nodes) create("indexer", ast, {
		expression: len(nodes) == 2 ?
			parse(nodes[0]) :
			indexerNodes(nodes[:len(nodes) - 1])
		index: parse(nodes[len(nodes) - 1])
	})

	return indexerNodes(ast.nodes)
}

fn application(ast) create("application", ast, {
	function: parse(ast.nodes[0])
	args:     map(parse, ast.nodes[1:])
})

fn unary(ast) {
	let ops {
		"binary-not":  code.binaryNot
		"plus":        code.plus
		"minus":       code.minus
		"logical-not": code.logicalNot
	}

	return create("unary", ast, {
		op:  ops[ast.nodes[0].name]
		arg: parse(ast.nodes[1])
	})
}

fn binary(ast) {
	let ops {
		"binary-and":    code.binaryAnd
		"xor":           code.xor
		"and-not":       code.andNot
		"lshift":        code.lshift
		"rshift":        code.rshift
		"mul":           code.mul
		"div":           code.div
		"mod":           code.mod
		"add":           code.add
		"sub":           code.sub
		"eq":            code.equals
		"not-eq":        code.notEq
		"less":          code.less
		"less-or-eq":    code.lessOrEq
		"greater":       code.greater
		"greater-or-eq": code.greaterOrEq
		"logical-and":   code.logicalAnd
		"logical-or":    code.logicalOr
	}

	return create("binary", ast, {
		op: ops[ast.nodes[len(ast.nodes) - 2].name]
		left: parse(
			len(ast.nodes) > 3 ?
			{ast..., nodes: ast.nodes[:len(ast.nodes) - 2]} :
			ast.nodes[0]
		)
		right: parse(ast.nodes[len(ast.nodes) - 1])
	})
}

fn chaining(ast)
	parse(fold(
		fn (f, a) {ast..., name: "application", nodes: [f, a]}
		ast.nodes[0]
		ast.nodes[1:]
	))

fn ternary(ast) create("cond", ast, {
	condition:   parse(ast.nodes[0])
	consequent:  parse(ast.nodes[1])
	alternative: parse(ast.nodes[2])
	ternary:     true
})

fn ifStatement(ast) {
	fn constructCond(cond, cons, alt) alt == false ?
		create("cond", ast, {condition: cond, consequent: cons, ternary: false}) :
		{constructCond(cond, cons, false)..., alternative: alt}

	return ast.nodes
		-> map(parse)
		-> lists.group(2)
		-> foldr(fn (g, i) len(g) == 1 ? g[0] : constructCond(g..., i), false)
}

fn parseCase(name, ast, c) create(name, ast, {
	expression: parse(c.nodes[0])
	body:       statementListOf(ast, c.nodes[1:])
})

fn defaultStatements(ast) ast.nodes
	-> filter(is({name: "default-block"}))
	-> map(structs.get("nodes"))
	-> flat
	-> statementListOf(ast)

fn switchStatement(ast) {
	let hasExpression =
		len(ast.nodes) > 0 &&
		!is({name: or("case-block", "default-block")}, ast.nodes[0])

	let (
		expression = hasExpression ? {expression: parse(ast.nodes[0])} : {}
		defaults   = defaultStatements(ast)
	)

	let cases  = ast.nodes -> filter(is({name: "case-block"})) -> map(parseCase("switch-case", ast))
	return create("switch-statement", ast, expression, {cases: cases}, {defaultStatements: defaults})
}

fn sendStatement(ast) create("send-statement", ast, {
	channel: parse(ast.nodes[0])
	value:   parse(ast.nodes[1])
})

fn receiveExpression(ast) create("receive-expression", ast, {
	channel: parse(ast.nodes[0])
})

fn selectStatement(ast) {
	let (
		hasDefault = some(is({name: "default-block"}), ast.nodes)
		defaults   = {hasDefault: hasDefault, defaultStatements: defaultStatements(ast)}
	)

	let cases = ast.nodes
		-> filter(is({name: "select-case-block"}))
		-> map(parseCase("select-case", ast))

	return create("select-statement", ast, cases..., defaults)
}

fn (
	goStatement(ast)    create("go-statement", ast, {application: parse(ast.nodes[0])})
	deferStatement(ast) create("defer-statement", ast, {application: parse(ast.nodes[0])})
)

fn rangeOver(ast) {
	fn (
		createRangeOver(...props) create("range-over", ast, props...)
		parseExpression(nodes)    structs.merge(map(parse, ast.nodes))
	)

	switch {
	case len(ast.nodes) == 0:
		return createRangeOver()
	case len(ast.nodes) == 1 && ast.nodes[0].name == "symbol":
		return createRangeOver({symbol: parse(ast.nodes[0]).name})
	case ast.nodes[0].name != "symbol":
		return createRangeOver({expression: parseExpression(ast.nodes)})
	default:
		return createRangeOver({
			symbol:     parse(ast.nodes[0]).name
			expression: parseExpression(ast.nodes[1:])
		})
	}
}

fn loop(ast) {
	fn createLoop(body) create("loop", ast, {body: statementList(body)})
	if len(ast.nodes) == 1 {
		return createLoop(ast.nodes[0])
	}

	let (
		emptyRange and({type: "range-over"}, not(or({symbol: any}, {expression: any})))
		expression parse(ast.nodes[0])
		loop       createLoop(ast.nodes[1])
	)

	return is(emptyRange, expression) ?
		loop :
		{loop..., expression: expression}
}

fn assign(ast) create("assign", ast, {
	capture: parse(ast.nodes[0])
	value:   parse(ast.nodes[1])
})

fn valueCapture(ast) create("definition", ast, {
	symbol:     parse(ast.nodes[0]).name
	expression: parse(ast.nodes[1])
	mutable:    false
	exported:   false
})

fn mutableCapture(ast) {valueCapture(ast)..., mutable: true}

fn valueDefinition(ast) len(ast.nodes) > 1 ?
	{docs: parse(ast.nodes[0]), parse(ast.nodes[1])...} :
	parse(ast.nodes[0])

fn definitionGroup(ast) create("definition-group", ast, {
	definitions: map(parse, ast.nodes)
})

fn mutableDefinitionGroup(ast) {
	let d definitionGroup(ast)
	return {
		d...
		definitions: map(fn (d) {d..., mutable: true}, d.definitions)
	}
}

fn functionCapture(ast) create("definition", ast, {
	symbol:     parse(ast.nodes[0]).name
	expression: functionFact(ast, 1)
	mutable:    false
	exported:   false
})

fn effectCapture(ast) {
	let f functionCapture(ast)
	return {
		f...
		expression: {f.expression..., effect: true}
	}
}

fn functionDefinition(ast) len(ast.nodes) > 1 ?
	{docs: parse(ast.nodes[0]), parse(ast.nodes[1])...} :
	parse(ast.nodes[0])

fn effectDefinitionGroup(ast) {
	let d definitionGroup(ast)
	return {
		d...
		definitions: map(fn (d) {d..., expression: {d.expression..., effect: true}}, d.definitions)
	}
}

fn exportStatement(ast) {
	let (
		d   parse(ast.nodes[0])
		dl  d.type == "definition" ? [d] : d.definitions
		edl map(fn (d) {d..., exported: true}, dl)
	)

	return create("definition-group", ast, {definitions: edl})
}

fn useFact(ast) {
	fn createUse(...props) create("use", ast, {effect: false}, props...)
	switch ast.nodes[0].name {
	case "use-inline":
		return createUse({capture: ".", path: parse(ast.nodes[1])})
	case "symbol":
		return createUse({capture: parse(ast.nodes[0]).name, path: parse(ast.nodes[1])})
	default:
		return createUse({path: parse(ast.nodes[0])})
	}
}

fn (
	useEffect(ast) {useFact(ast)..., effect: true}
	useList(ast)   create("use-list", ast, {uses: map(parse, ast.nodes)})
	module(ast)    create("module", ast, {body: statementList(ast)})
)

fn parse(ast) {
	switch ast.name {
	case "line-comment-content":
		return commentLine(ast)
	case "line-comment":
		return lineComment(ast)
	case "block-comment-content":
		return blockCommentContent(ast)
	case "block-comment":
		return blockComment(ast)
	case "int":
		return intCode(ast)
	case "float":
		return floatCode(ast)
	case "string":
		return stringCode(ast)
	case "true":
		return boolCode(ast)
	case "false":
		return boolCode(ast)
	case "symbol":
		return symbol(ast)
	}

	let (
		  a    assortComments(ast)
		~ code create("unknown", a.ast)
	)

	switch a.ast.name {
	case "spread":
		code = spread(a.ast)
	case "list":
		code = list(a.ast)
	case "mutable-list":
		code = mutableList(a.ast)
	case "expression-key":
		code = expressionKey(a.ast)
	case "entry":
		code = entry(a.ast)
	case "struct":
		code = struct(a.ast)
	case "mutable-struct":
		code = mutableStruct(a.ast)
	case "ret":
		code = ret(a.ast)
	case "check-ret":
		code = checkRet(a.ast)
	case "block":
		code = statementList(a.ast)
	case "collect-parameter":
		code = collectParameter(a.ast)
	case "function":
		code = functionLiteral(a.ast)
	case "effect":
		code = effect(a.ast)
	case "range-from":
		code = rangeExpression(a.ast)
	case "range-to":
		code = rangeExpression(a.ast)
	case "symbol-index":
		code = symbolIndex(a.ast)
	case "expression-index":
		code = expressionIndex(a.ast)
	case "range-index":
		code = rangeIndex(a.ast)
	case "indexer":
		code = indexer(a.ast)
	case "application":
		code = application(a.ast)
	case "unary":
		code = unary(a.ast)
	case "binary0":
		code = binary(a.ast)
	case "binary1":
		code = binary(a.ast)
	case "binary2":
		code = binary(a.ast)
	case "binary3":
		code = binary(a.ast)
	case "binary4":
		code = binary(a.ast)
	case "chaining":
		code = chaining(a.ast)
	case "ternary":
		code = ternary(a.ast)
	case "if-statement":
		code = ifStatement(a.ast)
	case "switch-statement":
		code = switchStatement(a.ast)
	case "send-statement":
		code = sendStatement(a.ast)
	case "receive-expression":
		code = receiveExpression(a.ast)
	case "receive-definition":
		code = valueCapture(a.ast)
	case "select-statement":
		code = selectStatement(a.ast)
	case "go-statement":
		code = goStatement(a.ast)
	case "defer-statement":
		code = deferStatement(a.ast)
	case "range-over":
		code = rangeOver(a.ast)
	case "break":
		code = create("break", a.ast)
	case "continue":
		code = create("continue", a.ast)
	case "loop":
		code = loop(a.ast)
	case "assign":
		code = assign(a.ast)
	case "value-capture":
		code = valueCapture(a.ast)
	case "mutable-capture":
		code = mutableCapture(a.ast)
	case "value-definition":
		code = valueDefinition(a.ast)
	case "docs-value-capture":
		code = valueDefinition(a.ast)
	case "docs-mixed-capture":
		code = valueDefinition(a.ast)
	case "value-definition-group":
		code = definitionGroup(a.ast)
	case "mutable-definition-group":
		code = mutableDefinitionGroup(a.ast)
	case "function-capture":
		code = functionCapture(a.ast)
	case "effect-capture":
		code = effectCapture(a.ast)
	case "function-definition":
		code = functionDefinition(a.ast)
	case "docs-function-capture":
		code = functionDefinition(a.ast)
	case "docs-mixed-function-capture":
		code = functionDefinition(a.ast)
	case "function-definition-group":
		code = definitionGroup(a.ast)
	case "effect-definition-group":
		code = effectDefinitionGroup(a.ast)
	case "export-statement":
		code = exportStatement(a.ast)
	case "use-fact":
		code = useFact(a.ast)
	case "use-effect":
		code = useEffect(a.ast)
	case "use-modules":
		code = useList(a.ast)
	case "mml":
		code = module(a.ast)
	}

	return {
		code...
		comments: {
			code:    map(parse, a.comments.nodes)
			indexes: a.comments.indexes
		}
	}
}

fn parserError(msg, ast) error(
	formats("%s:%d:%d:%v", ast.file, ast.line, ast.column, msg)
)

fn knownOrError(code) is({type: not("unknown")}, code) ?
	code :
	parserError("unknown code", code.ast)

fn parsePrimitive(code) {
	switch code.type {
	case "int":
		let v parseInt(code.ast.text)
		return isError(v) ? parserError(v, code.ast) : {code..., value: v}
	case "float":
		let v parseFloat(code.ast.text)
		return isError(v) ? parserError(v, code.ast) : {code..., value: v}
	case "string":
		return {
			code...
			value: strings.unescape(code.ast.text[1:len(code.ast.text) - 1])
		}
	case "bool":
		return {code..., value: code.ast.text == "true"}
	default:
		return code
	}
}

// ast transforms the AST representation of MML code into its internal representation after
// validating it.
//
// validating the AST is necessary, because the AST can be an input from a non-MML process and MML
// does not know if it is of the expected structure, even if we know that the AST parser cannot
// return with an invalid tree. The validation could be the part of the parse step, but then the
// individual parser functions would be more complex, because they would need to do error handling.
// One benefit of the approach is: the parser can accept ASTs from any origin, not only the AST
// parser.
//
// parsing primitives is executed by this function in a phase separate from parse, because while
// parse does not return errors and can be simpler therefore, parsePrimitive may return errors
// since the input validation does not check the node text, as that would be equivalent to parsing
// it.
//
fn ast(node) node -> errors.pass(
	validateast.do
	parse
	codetree.edit(parsePrimitive)
	codetree.edit(knownOrError)
)

export fn do(text) text -> errors.pass(parseAST, ast)
