ws:ws      = " " | "\b" | "\f" | "\r" | "\t" | "\v";
wsc:ws     = comment;
nl:alias   = "\n";
wsep:alias = ws | nl;

line-comment-content:nows  = [^\n]*;
comment-line:nows:alias    = "//" line-comment-content;
line-comment               = comment-line (nl comment-line)*;
block-comment-content:nows = ([^*] | "*" [^/])*;
block-comment:nows         = "/*" block-comment-content "*/";
comment:alias              = line-comment | block-comment;

true:kw          = "true";
false:kw         = "false";
return:kw:alias  = "return";
check:kw:alias   = "check"; // TODO: consider a less used keyword
fn:kw:alias      = "fn";
if:kw:alias      = "if";
else:kw:alias    = "else";
switch:kw:alias  = "switch";
case:kw:alias    = "case";
default:kw:alias = "default";
send:kw:alias    = "send";
receive:kw:alias = "receive";
select:kw:alias  = "select";
go:kw:alias      = "go";
defer:kw:alias   = "defer";
in:kw:alias      = "in";
for:kw:alias     = "for";
break:kw         = "break";
continue:kw      = "continue";
let:kw:alias     = "let";
export:kw:alias  = "export";
use:kw:alias     = "use";

decimal-digit:alias = [0-9];
octal-digit:alias   = [0-7];
hexa-digit:alias    = [0-9a-fA-F];

decimal:alias:nows = [1-9] decimal-digit*;
octal:alias:nows   = "0" octal-digit*;
hexa:alias:nows    = "0" [xX] hexa-digit+;
int                = decimal | octal | hexa;

exponent:alias:nows = [eE] [+\-]? decimal-digit+;
float:nows          = decimal-digit+ "." decimal-digit* exponent?
                    | "." decimal-digit+ exponent?
                    | decimal-digit+ exponent;

string:nows = "\"" ([^\\"] | "\\" .)* "\"";

bool:alias = true | false;

symbol:nows:nokw = [a-zA-Z_][a-zA-Z_0-9]*;

spread                = primary-expression "...";
list-sep:alias        = (nl | ",")+;
list-item:alias       = expression | spread;
expression-list:alias = list-item (list-sep list-item)*;

list-fact:alias = "[" list-sep? expression-list? list-sep? "]";
list            = list-fact;
mutable-list    = "~" nl* list-fact;

expression-key    = "[" nl* expression nl* "]";
entry             = (symbol | string | expression-key) nl* ":" nl* expression;
entry-list:alias  = (entry | spread) (list-sep (entry | spread))*;
struct-fact:alias = "{" list-sep? entry-list? list-sep? "}";
struct            = struct-fact;
mutable-struct    = "~" nl* struct-fact;

parameter-list:alias         = symbol (list-sep symbol)*;
collect-parameter            = "..." nl* symbol;
ret                          = return | return nl* expression;
check-ret                    = check nl* expression;
simple-statement:alias       = send-statement
                             | go-statement
                             | defer-statement
                             | assign
                             | simple-statement-group;
simple-statement-group:alias = "(" nl* simple-statement nl* ")";
block                        = "{" sep? statement-list? sep? "}";
function-fact:alias          = "(" list-sep?
                               (parameter-list
                               | parameter-list list-sep collect-parameter
                               | collect-parameter)?
                               list-sep? ")" nl*
                               (expression | simple-statement | block);
function                     = fn nl* function-fact; // consider allowing =
effect                       = fn nl* "~" nl* function-fact;

range-from  = expression;
range-to    = expression;
range:alias = range-from? nl* ":" nl* range-to?;

symbol-index     = "." nl* symbol;
expression-index = "[" nl* expression nl* "]";
range-index      = "[" nl* range nl* "]";
index:alias      = symbol-index | expression-index | range-index;
index-list:alias = index (nl* index)?;
indexer          = primary-expression nl* index-list;

application = primary-expression "(" list-sep? expression-list? list-sep? ")";

primary-expression:alias = int
                         | float
                         | string
                         | bool
                         | symbol
                         | list
                         | mutable-list
                         | struct
                         | mutable-struct
                         | function
                         | effect
                         | indexer
                         | application
                         | receive-expression
                         | expression-group;

binary-not = "^";
binary-and = "&";
binary-or  = "|";
xor        = "^";
and-not    = "&^";
lshift     = "<<";
rshift     = ">>";

plus  = "+";
minus = "-";
mul   = "*";
div   = "/";
mod   = "%";
add   = "+";
sub   = "-";

logical-not   = "!";
eq            = "==";
not-eq        = "!=";
less          = "<";
less-or-eq    = "<=";
greater       = ">";
greater-or-eq = ">=";
logical-and   = "&&";
logical-or    = "||";

chain:alias = "->";

unary-operator:alias = plus | minus | binary-not | logical-not;
unary                = unary-operator primary-expression;

binary-op0:alias = binary-and | and-not | lshift | rshift | mul | div | mod;
binary-op1:alias = binary-or | xor | add | sub;
binary-op2:alias = eq | not-eq | less | less-or-eq | greater | greater-or-eq;
binary-op3:alias = logical-and;
binary-op4:alias = logical-or;

operand0:alias = primary-expression | unary;
operand1:alias = operand0 | binary0;
operand2:alias = operand1 | binary1;
operand3:alias = operand2 | binary2;
operand4:alias = operand3 | binary3;
operand5:alias = operand4 | binary4;

binary0  = operand0 (nl* binary-op0 nl* operand0)+;
binary1  = operand1 (nl* binary-op1 nl* operand1)+;
binary2  = operand2 (nl* binary-op2 nl* operand2)+;
binary3  = operand3 (nl* binary-op3 nl* operand3)+;
binary4  = operand4 (nl* binary-op4 nl* operand4)+;

binary:alias = binary0
             | binary1
             | binary2
             | binary3
             | binary4;

ternary = expression nl* "?" nl* expression nl* ":" nl* expression;

chainingOperand:alias = primary-expression
                      | unary
                      | binary
                      | ternary;
chaining = chainingOperand (nl* chain nl* chainingOperand)+;

expression:alias       = primary-expression
                       | unary
                       | binary
                       | ternary
                       | chaining;
expression-group:alias = "(" nl* expression nl* ")";

if-statement = if nl* expression nl* block
               (nl* else nl* if nl* expression nl* block)*
               (nl* else nl* block)?;

case-block        = case nl* expression nl* ":" sep? statement-list?;
default-block     = default nl* ":" sep? statement-list?;
case-blocks:alias = case-block (sep case-block)*;
cases:alias       = case-blocks
                  | default-block
                  | (case-blocks sep)? default-block (sep case-blocks)?;
switch-statement  = switch nl* "{" sep? cases? sep? "}"
                  | switch nl* expression? nl* "{" sep? cases? sep? "}";

send-statement           = send nl* primary-expression nl* primary-expression;
receive-expression       = receive nl* primary-expression;
receive-definition       = symbol nl* receive-expression;
communication:alias      = send-statement | receive-expression | receive-definition;
select-case-block        = case nl* communication nl* ":" sep? statement-list?;
select-case-blocks:alias = select-case-block (sep select-case-block)*;
select-cases:alias       = select-case-blocks
                         | default-block
                         | (select-case-blocks sep)? default-block (sep select-case-blocks)?;
select-statement         = select nl* "{" sep? select-cases? sep? "}";

go-statement    = go nl* application;
defer-statement = defer nl* application;

loop-control:alias    = break | continue;
range-over            = symbol nl* in nl* (expression | range) | range;
loop-expression:alias = expression | range-over;
loop                  = for ((nl* loop-expression)? nl* block | nl* block);

capture:alias       = symbol | indexer | capture-group;
capture-group:alias = "(" nl* capture nl* ")";
assign              = capture nl* "=" nl* expression;

docs = comment nl?;

value-capture-fact:alias = symbol (nl* "=")? nl* expression;
value-capture            = value-capture-fact;
mutable-capture          = "~" nl* value-capture-fact;

docsLet:nows:alias = docs? let;
value-definition   = docsLet nl* (value-capture | mutable-capture);

docs-value-capture:nows  = docs? value-capture;
docs-mixed-capture:nows  = docs? (value-capture | mutable-capture);
value-capture-list:alias = docs-value-capture (list-sep docs-value-capture)*;
mixed-capture-list:alias = docs-mixed-capture (list-sep docs-mixed-capture)*;

value-definition-group   = let nl* "(" list-sep? mixed-capture-list? list-sep? ")";
mutable-definition-group = let nl* "~" nl* "(" list-sep? value-capture-list? list-sep? ")";

function-definition-fact:alias = symbol nl* function-fact;
function-capture               = function-definition-fact;
effect-capture                 = "~" nl* function-definition-fact;

docsFn:nows:alias   = docs? fn;
function-definition = docsFn nl* (function-capture | effect-capture);

docs-function-capture:nows        = docs? function-capture;
docs-mixed-function-capture:nows  = docs? (function-capture | effect-capture);
function-capture-list:alias       = docs-function-capture (list-sep docs-function-capture)*;
mixed-function-capture-list:alias = docs-mixed-function-capture (list-sep docs-mixed-function-capture)*;

function-definition-group = fn nl* "(" list-sep?
                            mixed-function-capture-list?
                            list-sep? ")";
effect-definition-group   = fn nl* "~" nl* "(" list-sep?
                            function-capture-list?
                            list-sep? ")";

definition:alias = value-definition
                 | value-definition-group
                 | mutable-definition-group
                 | function-definition
                 | function-definition-group
                 | effect-definition-group;

use-inline             = ".";
use-fact               = string
                       | (symbol | use-inline) (nl* "=")? nl* string;
use-effect             = "~" nl* string
                       | (symbol | use-inline) (nl* "=")? nl* "~" nl* string;
use-fact-list:alias    = use-fact (list-sep use-fact)*;
use-mixed-list:alias   = (use-fact | use-effect) (list-sep (use-fact | use-effect))*;
use-statement:alias    = use nl* (use-fact | use-effect);
use-group:alias        = use nl* "(" list-sep? use-mixed-list? list-sep? ")";
use-effect-group:alias = use nl* "~" nl* "(" list-sep? use-fact-list list-sep? ")";
use-modules            = use-statement | use-group | use-effect-group;

export-statement = export nl* definition;

statement:alias       = ret
                      | check-ret
                      | application
                      | chaining
                      | if-statement
                      | switch-statement
                      | send-statement
                      | select-statement
                      | go-statement
                      | defer-statement
                      | loop-control
                      | loop
                      | definition
                      | export-statement
                      | use-modules
                      | statement-group
                      | simple-statement;
statement-group:alias = "(" nl* statement nl* ")";

sep:alias            = (";" | nl)+;
statement-list:alias = statement (sep statement)*;

shebang-command = [^\n]*;
shebang         = "#!" shebang-command nl;
mml:root        = shebang? sep? statement-list? sep?;
