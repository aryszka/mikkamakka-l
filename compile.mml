use (
	. "list"
	. "errors"
	. "strings"
	. "ints"
	. "log"
	. "statements"
)

fn (
	passErrFormat(fmt, ...p) p -> anyErr -> passErr(format(fmt))
	notEmpty(l)              l -> filter(fn (s) s != "")
)

let (
	compileInt   string
	compileFloat string
	compileBool  string
)

// TODO: take unique
fn getScope(...statements) {
	let (
		defs getFlattenedStatements("definition", "definition-list", "definitions", statements)
		uses getFlattenedStatements("use", "use-list", "uses", statements)
		inlineUses uses
		-> filter(has("exportNames"))
		-> map(fn (u) u.exportNames)
		-> fold(fn (current, result) [result..., current...], [])
		notInlineUses uses
		-> filter(fn (u) u.capture != ".")
	)

	return [map(fn (d) d.symbol, defs)..., map(fn (u) u.path, notInlineUses)..., inlineUses...]
}

// TODO:
// - compiling string keys in struct
// - struct keys should not be prefixed by "_"
// - spread for maps
fn (
	mapCompile(l)         l -> map(compile) -> anyErr
	mapCompileJoin(j, l)  l -> mapCompile -> passErr(join(j))
	compileComment(_)     ""
	compileString(s)      formats("\"%s\"", escape(s))
	compileSymbol(s)      formats("_%s", s.name)
	compileEntries(e)     mapCompileJoin(",", e)
	compileStructure(s)   passErrFormat("map[string]interface{}{%s}", compileEntries(s.entries))
	compileCond(c)        c.ternary ? compileTernary(c) : compileIf(c)
	compileSpread(s)      passErrFormat("%s.([]interface{})...", compile(s.value))
	compileCase(c)        passErrFormat("case %s:\n%s", compile(c.expression), compile(c.body))
	compileSend(s)        passErrFormat("%s <- %s", compile(s.channel), compile(s.value))
	compileReceive(r)     passErrFormat("<- %s", compile(r.channel))
	compileGo(g)          passErrFormat("go %s", compile(g.application))
	compileDefer(d)       passErrFormat("defer %s", compile(d.application))
	compileDefinitions(l) mapCompileJoin(";\n", l.definitions)
	compileAssign(a)      passErrFormat("%s = %s", compile(a.capture), compile(a.value))
	compileAssigns(l)     mapCompileJoin(";\n", l.assignments)
	compileRet(r)         passErrFormat("return %s", compile(r.value))
	compileControl(c)     c.control == breakControl ? "break" : "continue"
)

fn compileList(l) {
	let compileValues mapCompile

	fn (
		isSpread(c)     len(c) > 3 && c[len(c) - 3:] == "..."
		selectSpread(c) isSpread(c) ? {spread: c} : c
	)

	let groupSpread fold(fn (item, groups) {
		let (
			i             len(groups) - 1
			isSpread      has("spread", item)
			groupIsSpread i >= 0 && has("spread", groups[i])
		)

		fn (
			appendNewSimple() [groups..., {simple: [item]}]
			appendNewSpread() [groups..., {spread: [item.spread]}]
			appendSimple()    [groups[:i]..., {simple: [groups[i].simple..., item]}]
			appendSpread()    [groups[:i]..., {spread: [groups[i].spread..., item.spread]}]
		)

		switch {
		case (i < 0 || groupIsSpread) && !isSpread:
			return appendNewSimple()
		case (i < 0 || !groupIsSpread) && isSpread:
			return appendNewSpread()
		case !groupIsSpread && !isSpread:
			return appendSimple()
		case groupIsSpread && isSpread:
			return appendSpread()
		}
	}, [])

	fn (
		appendSimples(code, group) formats("append(%s, %s)", code, join(", ", group))
		appendSpread(item, code)   formats("append(%s, %s)", code, item)
		appendSpreads(code, group) fold(appendSpread, code, group)
		appendGroups(groups)       fold(appendGroup, "[]interface{}{}", groups)
	)

	fn appendGroup(group, code) has("spread", group) ?
		appendSpreads(code, group.spread) :
		appendSimples(code, group.simple)

	return l.values
	-> compileValues
	-> passErr(map(selectSpread))
	-> passErr(groupSpread)
	-> passErr(appendGroups)
}

fn compileEntry(e) {
	let key has("type", e.key) && e.key.type == "symbol" ?
		e.key.name :
		compile(e.key)
	let value compile(e.value)
	return passErrFormat("\"%s\":%s", key, value)
}

fn compileParamList(params, collectParam) {
	let ~ p []
	for i in 0:len(params) {
		p = [p..., formats("var _%s = a[%d]", params[i], i)]
	}

	if collectParam != "" {
		p = [p..., formats("var _%s = a[%d:]", collectParam, len(params))]
	}

	return join(";\n", p)
}

fn compileFunction(f) {
	let multipleStatements
		has("type", f.statement) &&
		f.statement.type == "statement-list"
	let scope getScope(f.statement)
	let paramNames f.collectParam == "" ? f.params : [f.params..., f.collectParam]
	let scopeNames join(", ", map(formatOne("_%s"), [scope..., paramNames...]))
	let scopeDefs scope
		-> map(fn (s) formats("var _%s interface{}", s))
		-> join(";\n")

	let fmt multipleStatements ?
		"&mml.Function{
			F: func(a []interface{}) interface{} {
				var c interface{}
				mml.Nop(c)
				%s;
				%s;
				mml.Nop(%s);
				%s;
				return nil
			},
			FixedArgs: %d,
		}" :
		"&mml.Function{
			F: func(a []interface{}) interface{} {
				var c interface{}
				mml.Nop(c)
				%s;
				%s;
				mml.Nop(%s);
				return %s
			},
			FixedArgs: %d,
		}"

	let (
		p compileParamList(f.params, f.collectParam)
		s compile(f.statement)
	)

	if isError(s) {
		return s
	}

	return formats(fmt, p, scopeDefs, scopeNames, s, len(f.params))
}

fn compileRangeExpression(e) passErrFormat(
	"%s:%s"
	has("from", e) ? compile(e.from) : ""
	has("to", e) ? compile(e.to) : ""
)

fn compileIndexer(i) {
	let exp compile(i.expression)
	if isError(exp) {
		return exp
	}

	if !has("type", i.index) || i.index.type != "range-expression" {
		let index compile(i.index)
		if isError(index) {
			return index
		}

		return formats("mml.Ref(%s, %s)", exp, index)
	}

	let ~ from "nil"
	if has("from", i.index) {
		from = compile(i.index.from)
		if isError(from) {
			return from
		}
	}

	let ~ to "nil"
	if has("to", i.index) {
		to = compile(i.index.to)
		if isError(to) {
			return to
		}
	}

	return formats("mml.RefRange(%s, %s, %s)", exp, from, to)
}

fn compileApplication(a) passErrFormat(
	has("type", a.function) && a.function.type == "function" ?
		"(%s).Call(%s)" :
		"%s.(*mml.Function).Call(%s)"
	compile(a.function)
	compileList({values: a.args})
)

let (
	unaryOp    enum()
	binaryNot  unaryOp()
	plus       unaryOp()
	minus      unaryOp()
	logicalNot unaryOp()
)

fn compileUnary(u) {
	let arg compile(u.arg)
	if isError(arg) {
		return arg
	}

	switch u.op {
	case logicalNot:
		if !isBool(u.arg) {
			arg = arg + ".(bool)"
		}

		return formats("!%s", arg)
	default:
		return formats("mml.UnaryOp(%d, %s)", u.op, arg)
	}
}

let (
	binaryOp    enum()
	binaryAnd   binaryOp()
	binaryOr    binaryOp()
	xor         binaryOp()
	andNot      binaryOp()
	lshift      binaryOp()
	rshift      binaryOp()
	mul         binaryOp()
	div         binaryOp()
	mod         binaryOp()
	add         binaryOp()
	sub         binaryOp()
	eq          binaryOp()
	notEq       binaryOp()
	less        binaryOp()
	lessOrEq    binaryOp()
	greater     binaryOp()
	greaterOrEq binaryOp()
	logicalAnd  binaryOp()
	logicalOr   binaryOp()
)

fn compileBinary(b) {
	if b.op != logicalAnd && b.op != logicalOr {
		return passErrFormat(
			"mml.BinaryOp(%s, %s, %s)"
			compile(b.op)
			compile(b.left)
			compile(b.right)
		)
	}

	fn isBoolOp(c)
		has("type", c) &&
		(c.type == "unary" && c.op == logicalNot) ||
		(c.type == "binary" && (c.op == logicalAnd || c.op == logicalOr))

	let ~ left compile(b.left)
	if isError(left) {
		return left
	}

	let ~ right compile(b.right)
	if isError(right) {
		return right
	}

	if !isBool(b.left) && !isBoolOp(b.left) {
		left = left + ".(bool)"
	}

	if !isBool(b.right) && !isBoolOp(b.right) {
		right = right + ".(bool)"
	}

	let ~ op "&&"
	if b.op == logicalOr {
		op = "||"
	}

	return formats("(%s %s %s)", left, op, right)
}

fn compileTernary(c) passErrFormat(
	"func () interface{} { c = %s; if c.(bool) { return %s } else { return %s } }()"
	compile(c.condition)
	compile(c.consequent)
	compile(c.alternative)
)

fn compileIf(c)
	has("alternative", c) ?
	passErrFormat(
		"c = %s; if c.(bool) { %s } else { %s }"
		compile(c.condition)
		compile(c.consequent)
		compile(c.alternative)
	) :
	passErrFormat(
		"c = %s; if c.(bool) { %s }"
		compile(c.condition)
		compile(c.consequent)
	)

fn compileSwitch(s) {
	let (
		hasDefault len(s.defaultStatements.statements) > 0
		exp has("expression", s) ? compile(s.expression) : ""
	)

	if isError(exp) {
		return exp
	}

	let cases s.cases -> map(compile) -> anyErr
	if isError(cases) {
		return cases
	}

	let def hasDefault ? compile(s.defaultStatements) : ""
	if isError(def) {
		return def
	}

	let (
		defaultCode hasDefault ? formats("default:\n%s", def) : ""
		casesCode join("\n", hasDefault ? [cases..., defaultCode] : cases)
	)

	return formats("switch %s {\n%s\n}", exp, casesCode)
}

fn compileSelect(s)
	s.cases
	-> map(compile)
	-> fn (c) (
		s.hasDefault ?
		[c..., s.defaultStatements -> compile -> passErr(formatOne("default:\n%s")) ] :
		c
	)
	-> anyErr
	-> passErr(join("\n"))
	-> passErr(formatOne("func() interface{} {\nselect {\n%s\n} }()"))

fn compileRangeOver(r) {
	fn infiniteCounter() passErrFormat(
		"_%s := 0; true; _%s++"
		r.symbol
		r.symbol
	)

	fn withRangeExpression() passErrFormat(
		"_%s := %s; %s; _%s++"
		r.symbol
		has("from", r.expression) ? compile(r.expression.from) : "0"
		has("to", r.expression) ?
			formats("_%s < %s.(int)", r.symbol, compile(r.expression.to)) :
			"true"
		r.symbol
	)

	// TODO:
	// - should work for struct, too
	// - the arg should be called with nop()
	fn listStyleRange() passErrFormat(
		"_, _%s := range %s.([]interface{})"
		r.symbol
		compile(r.expression)
	)

	switch {
	case !has("expression", r):
		return infiniteCounter()
	case has("type", r.expression) && r.expression.type == "range-expression":
		return withRangeExpression()
	default:
		return listStyleRange()
	}
}

// TODO: nop call for the loop variable

fn compileLoop(l) passErrFormat(
	"for %s {\n%s\n}"
	has("expression", l) ? compile(l.expression) : ""
	compile(l.body)
)

fn compileDefinition(d) d.exported ?
	passErrFormat(
		"_%s = %s; exports[\"%s\"] = _%s"
		d.symbol
		compile(d.expression)
		d.symbol
		d.symbol
	) :
	passErrFormat(
		"_%s = %s"
		d.symbol
		compile(d.expression)
	)

let (
	controlStatement enum()
	breakControl     controlStatement()
	continueControl  controlStatement()
)

fn compileStatements(s) {
	let scope getScope(s...)
	let scopeDefs scope
		-> map(fn (s) formats("var _%s interface{}", s))
		-> join(";\n")
	let scopeNames join(", ", map(formatOne("_%s"), scope))
	let statements mapCompile(s) -> passErr(notEmpty) -> passErr(join(";\n"))
	return formats("%s;\nmml.Nop(%s);\n%s", scopeDefs, scopeNames, statements)
}

fn compileModule(m) {
	let statements compileStatements(m.statements)
	if isError(statements) {
		return statements
	}

	return formats("%s", statements)
}

// TODO
fn getModuleName(path) path

fn compileUse(u) {
	switch {
	case u.capture == ".":
		let useStatement formats(
			"var __%s = mml.Modules.Use(\"%s.mml\");"
			getModuleName(u.path)
			u.path
		)

		let assigns map(fn (name)
			formats(
				"_%s = __%s[\"%s\"]"
				name
				getModuleName(u.path)
				name
			)
			u.exportNames
		)
		-> join(";\n")

		return joins(";", useStatement, assigns)
	case len(u.capture) == "":
		return ""
	default:
		return formats(
			"_%s = mml.Modules.Use(\"%s.mml\")"
			getModuleName(u.path)
			u.path
		)
	}
}

fn compileUseList(u) mapCompileJoin("\n;", u.uses)

// TODO: trim comments from everywhere

export fn compile(code) {
	switch {
	case isInt(code):
		return compileInt(code)
	case isFloat(code):
		return compileFloat(code)
	case isString(code):
		return compileString(code)
	case isBool(code):
		return compileBool(code)
	}

	switch code.type {
	case "comment":
		return compileComment(code)
	case "symbol":
		return compileSymbol(code)
	case "module":
		return compileModule(code)
	case "list":
		return compileList(code)
	case "entry":
		return compileEntry(code)
	case "structure":
		return compileStructure(code)
	case "function":
		return compileFunction(code)
	case "range-expression":
		return compileRangeExpression(code)
	case "indexer":
		return compileIndexer(code)
	case "spread":
		return compileSpread(code)
	case "function-application":
		return compileApplication(code)
	case "unary":
		return compileUnary(code)
	case "binary":
		return compileBinary(code)
	case "cond":
		return compileCond(code)
	case "switch-case":
		return compileCase(code)
	case "switch-statement":
		return compileSwitch(code)
	case "send":
		return compileSend(code)
	case "receive":
		return compileReceive(code)
	case "go":
		return compileGo(code)
	case "defer":
		return compileDefer(code)
	case "select-case":
		return compileCase(code)
	case "select":
		return compileSelect(code)
	case "range-over":
		return compileRangeOver(code)
	case "loop":
		return compileLoop(code)
	case "definition":
		return compileDefinition(code)
	case "definition-list":
		return compileDefinitions(code)
	case "assign":
		return compileAssign(code)
	case "assign-list":
		return compileAssigns(code)
	case "ret":
		return compileRet(code)
	case "control-statement":
		return compileControl(code)
	case "statement-list":
		return compileStatements(code.statements)
	case "use":
		return compileUse(code)
	case "use-list":
		return compileUseList(code)
	default:
		return error(formats("unsupported code: %v", code))
	}
}
