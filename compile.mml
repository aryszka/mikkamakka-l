use (
	. "lang"
	  "errors"
	  "code"
	  "strings"
)

fn notEmpty(l) l -> filter(fn (s) s != "")

let (
	compileInt   string
	compileFloat string
	compileBool  string
)

fn getScope(...statements) {
	let (
		defs code.flattenedStatements("definition", "definition-list", "definitions", statements)
		uses code.flattenedStatements("use", "use-list", "uses", statements)
	)

	let inlineUses uses
	-> filter(fn (u) u.capture == ".")
	-> filter(has("exportNames"))
	-> map(fn (u) u.exportNames)
	-> flat

	let namedUses uses
	-> filter(fn (u) u.capture != "." && u.capture != "")

	let unnamedUses uses
	-> filter(fn (u) u.capture == "")

	return flat([
		map(fn (d) d.symbol, defs)
		map(fn (u) u.capture, namedUses)
		map(fn (u) u.path, unnamedUses)
		inlineUses
	])
}

fn (
	comment(_)        ""
	compileString(s)  formats("\"%s\"", strings.escape(s))
	symbol(s)         formats("_%s", s.name)
	cond(c)           c.ternary ? ternary(c) : compileIf(c)
	spreadList(s)     formats("%s.(*mml.List).Values...", do(s.value))
	compileCase(c)    formats("case %s:\n%s", do(c.expression), do(c.body))
	compileSend(s)    formats("%s <- %s", do(s.channel), do(s.value))
	compileReceive(r) formats("<- %s", do(r.channel))
	compileGo(g)      formats("go %s", do(g.application))
	definitions(l)    l.definitions -> map(do) -> join(";\n")
	assigns(l)        l.assignments -> map(do) -> join(";\n")
	ret(r)            formats("return %s", do(r.value))
	control(c)        c.control == code.breakControl ? "break" : "continue"
	useList(u)        u.uses -> map(do) -> join(";\n")
)

fn list(l) {
	fn (
		isSpread(c)     len(c) > 3 && c[len(c) - 3:] == "..."
		selectSpread(c) isSpread(c) ? {spread: c} : c
	)

	let groupSpread fold(fn (item, groups) {
		let (
			i             len(groups) - 1
			isSpread      has("spread", item)
			groupIsSpread i >= 0 && has("spread", groups[i])
		)

		fn (
			appendNewSimple() [groups..., {simple: [item]}]
			appendNewSpread() [groups..., {spread: [item.spread]}]
			appendSimple()    [groups[:i]..., {simple: [groups[i].simple..., item]}]
			appendSpread()    [groups[:i]..., {spread: [groups[i].spread..., item.spread]}]
		)

		switch {
		case (i < 0 || groupIsSpread) && !isSpread:
			return appendNewSimple()
		case (i < 0 || !groupIsSpread) && isSpread:
			return appendNewSpread()
		case !groupIsSpread && !isSpread:
			return appendSimple()
		case groupIsSpread && isSpread:
			return appendSpread()
		}
	}, [])

	fn (
		appendSimples(code, group) formats("append(%s, %s)", code, join(", ", group))
		appendSpread(item, code)   formats("append(%s, %s)", code, item)
		appendSpreads(code, group) fold(appendSpread, code, group)
		appendGroups(groups)       fold(appendGroup, "[]interface{}{}", groups)
	)

	fn appendGroup(group, code) has("spread", group) ?
		appendSpreads(code, group.spread) :
		appendSimples(code, group.simple)

	return l.values
	-> map(do)
	-> map(selectSpread)
	-> groupSpread
	-> appendGroups
	-> fn (c) formats("&mml.List{Values: %s}", c)
}

fn entry(e) formats(
	"\"%s\":%s"
	has("type", e.key) && e.key.type == "symbol" ?
		e.key.name :
		do(e.key)
	do(e.value)
)

fn expressionKey(k) do(k.value)

fn struct(s) {
	fn entry(e) {
		let v do(e.value)
		if e.type == "spread" {
			let (
				var    formats("sp := %s.(*mml.Struct);", v)
				assign "for k, v := range sp.Values { s.Values[k] = v };"
			)

			return formats("func() { %s; %s }();\n", var, assign)
		}

		if isString(e.key) {
			return formats("s.Values[\"%s\"] = %s;", e.key, v)
		}
		
		if e.key.type == "symbol" {
			return formats("s.Values[\"%s\"] = %s;", e.key.name, v)
		}

		return formats("s.Values[%s.(string)] = %s;", do(e.key), v)
	}

	let entries s.entries
	-> map(entry)

	return formats(
		"func() interface{} { s := &mml.Struct{Values: make(map[string]interface{})}; %s; return s }()"
		entries -> join("")
	)
}

fn paramList(params, collectParam) {
	let ~ p []
	for i in 0:len(params) {
		p = [p..., formats("var _%s = a[%d]", params[i], i)]
	}

	if collectParam != "" {
		p = [p..., formats("var _%s interface{}; _%s = &mml.List{a[%d:]}", collectParam, collectParam, len(params))]
	}

	return join(";\n", p)
}

fn function(f) {
	let (
		scope      getScope(f.statement)
		paramNames f.collectParam == "" ? f.params : [f.params..., f.collectParam]
	)

	return formats(
		has("type", f.statement) && f.statement.type == "statement-list" ?
		"&mml.Function{
			F: func(a []interface{}) interface{} {
				var c interface{}
				mml.Nop(c)
				%s;
				%s;
				mml.Nop(%s);
				%s;
				return nil
			},
			FixedArgs: %d,
		}" :
		"&mml.Function{
			F: func(a []interface{}) interface{} {
				var c interface{}
				mml.Nop(c)
				%s;
				%s;
				mml.Nop(%s);
				return %s
			},
			FixedArgs: %d,
		}"
		paramList(f.params, f.collectParam)
		scope -> uniq(eq) -> map(fn (s) formats("var _%s interface{}", s)) -> join(";\n")
		join(", ", map(strings.formatOne("_%s"), [scope..., paramNames...]))
		do(f.statement)
		len(f.params)
	)
}

fn indexer(i)
	!has("type", i.index) || i.index.type != "range-expression" ?
	formats(
		"mml.Ref(%s, %s)"
		do(i.expression)
		do(i.index)
	) :
	formats(
		"mml.RefRange(%s, %s, %s)"
		do(i.expression)
		has("from", i.index) ? do(i.index.from) : "nil"
		has("to", i.index) ? do(i.index.to) : "nil"
	)

fn application(a) formats(
	has("type", a.function) && a.function.type == "function" ?
		"(%s).Call((%s).Values)" :
		"%s.(*mml.Function).Call((%s).Values)"
	do(a.function)
	list({values: a.args})
)

fn unary(u)
	u.op == code.logicalNot ?
	formats(
		isBool(u.arg) ? "!%s" : "!%s.(bool)"
		do(u.arg)
	) :
	formats(
		"mml.UnaryOp(%d, %s)"
		u.op
		do(u.arg)
	)

fn binary(b) {
	if b.op != code.logicalAnd && b.op != code.logicalOr {
		return formats(
			"mml.BinaryOp(%s, %s, %s)"
			do(b.op)
			do(b.left)
			do(b.right)
		)
	}

	fn isBoolOp(c)
		has("type", c) &&
		(c.type == "unary" && c.op == code.logicalNot) ||
		(c.type == "binary" && (c.op == code.logicalAnd || c.op == code.logicalOr))

	let ~ (
		left  do(b.left)
		right do(b.right)
	)

	if !isBool(b.left) && !isBoolOp(b.left) {
		left = left + ".(bool)"
	}

	if !isBool(b.right) && !isBoolOp(b.right) {
		right = right + ".(bool)"
	}

	let ~ op "&&"
	if b.op == code.logicalOr {
		op = "||"
	}

	return formats("(%s %s %s)", left, op, right)
}

fn ternary(c) formats(
	"func () interface{} { c = %s; if c.(bool) { return %s } else { return %s } }()"
	do(c.condition)
	do(c.consequent)
	do(c.alternative)
)

fn compileIf(c)
	has("alternative", c) ?
	formats(
		"c = %s; if c.(bool) { %s } else { %s }"
		do(c.condition)
		do(c.consequent)
		do(c.alternative)
	) :
	formats(
		"c = %s; if c.(bool) { %s }"
		do(c.condition)
		do(c.consequent)
	)

fn compileSwitch(s) {
	let (
		hasDefault  len(s.defaultStatements.statements) > 0
		cases       s.cases -> map(do)
		def         hasDefault ? do(s.defaultStatements) : ""
		defaultCode hasDefault ? formats("default:\n%s", def) : ""
	)

	return formats(
		"switch %s {\n%s\n}"
		has("expression", s) ? do(s.expression) : ""
		(hasDefault ? [cases..., defaultCode] : cases) -> join("\n")
	)
}

fn compileSelect(s)
	s.cases
	-> map(do)
	-> fn (c) (
		s.hasDefault ?
		[
			c...
			s.defaultStatements
			-> do
			-> strings.formatOne("default:\n%s")
		] :
		c
	)
	-> join("\n")
	-> strings.formatOne("func() interface{} {\nselect {\n%s\n} }()")

fn compileDefer(d) {
	return formats(
		has("type", d.application.function) && d.application.function.type == "function" ?
			"c = (%s); defer c.Call((%s).Values)" :
			"defer %s.(*mml.Function).Call((%s).Values)"
		do(d.application.function)
		list({values: d.application.args})
	)
}

fn rangeOver(r) {
	fn infiniteCounter() formats(
		"_%s := 0; true; _%s++"
		r.symbol
		r.symbol
	)

	fn withRangeExpression() formats(
		"_%s := %s; %s; _%s++"
		r.symbol
		has("from", r.expression) ? do(r.expression.from) : "0"
		has("to", r.expression) ?
			formats("_%s < %s.(int)", r.symbol, do(r.expression.to)) :
			"true"
		r.symbol
	)

	// TODO:
	// - should work for struct, too
	// - the arg should be called with nop()
	fn listStyleRange() formats(
		"_, _%s := range %s.(*mml.List).Values"
		r.symbol
		do(r.expression)
	)

	switch {
	case !has("expression", r):
		return infiniteCounter()
	case has("type", r.expression) && r.expression.type == "range-expression":
		return withRangeExpression()
	default:
		return listStyleRange()
	}
}

// TODO: nop call for the loop variable
fn loop(l) formats(
	"for %s {\n%s\n}"
	has("expression", l) ? do(l.expression) : ""
	do(l.body)
)

fn definition(d)
	d.exported ?
	formats(
		"_%s = %s; exports[\"%s\"] = _%s"
		d.symbol
		do(d.expression)
		d.symbol
		d.symbol
	) :
	formats(
		"_%s = %s"
		d.symbol
		do(d.expression)
	)

fn assign(a)
	a.capture.type == "symbol" ?
	formats(
		"%s = %s"
		do(a.capture)
		do(a.value)
	) :
	formats(
		"mml.SetRef(%s, %s, %s)"
		do(a.capture.expression)
		do(a.capture.index)
		do(a.value)
	)

fn statements(s) {
	let (
		scope      getScope(s...)
		scopeNames join(", ", map(strings.formatOne("_%s"), scope))
		statements map(do, s) -> notEmpty -> join(";\n")
	)

	let scopeDefs scope
		-> uniq(eq)
		-> map(fn (s) formats("var _%s interface{}", s))
		-> join(";\n")

	return formats(
		"%s;\nmml.Nop(%s);\n%s"
		scopeDefs
		scopeNames
		statements
	)
}

fn compileUse(u) {
	switch {
	case u.capture == ".":
		let useStatement formats(
			"var __%s = mml.Modules.Use(\"%s.mml\");"
			code.getModuleName(u.path)
			u.path
		)

		let assigns map(fn (name)
			formats(
				"_%s = __%s.Values[\"%s\"]"
				name
				code.getModuleName(u.path)
				name
			)
			u.exportNames
		)
		-> join(";\n")

		return joins(";", useStatement, assigns)
	case u.capture != "":
		return formats(
			"_%s = mml.Modules.Use(\"%s.mml\")"
			u.capture
			u.path
		)
	default:
		return formats(
			"_%s = mml.Modules.Use(\"%s.mml\")"
			code.getModuleName(u.path)
			u.path
		)
	}
}

// TODO: trim comments from everywhere

export fn do(code) {
	switch {
	case isInt(code):
		return compileInt(code)
	case isFloat(code):
		return compileFloat(code)
	case isString(code):
		return compileString(code)
	case isBool(code):
		return compileBool(code)
	}

	switch code.type {
	case "comment":
		return comment(code)
	case "symbol":
		return symbol(code)
	case "list":
		return list(code)
	case "expression-key":
		return expressionKey(code)
	case "entry":
		return entry(code)
	case "struct":
		return struct(code)
	case "function":
		return function(code)
	case "indexer":
		return indexer(code)
	case "spread":
		return spreadList(code)
	case "application":
		return application(code)
	case "unary":
		return unary(code)
	case "binary":
		return binary(code)
	case "cond":
		return cond(code)
	case "switch-case":
		return compileCase(code)
	case "switch-statement":
		return compileSwitch(code)
	case "send":
		return compileSend(code)
	case "receive":
		return compileReceive(code)
	case "go":
		return compileGo(code)
	case "defer":
		return compileDefer(code)
	case "select-case":
		return compileCase(code)
	case "select":
		return compileSelect(code)
	case "range-over":
		return rangeOver(code)
	case "loop":
		return loop(code)
	case "definition":
		return definition(code)
	case "definition-list":
		return definitions(code)
	case "assign":
		return assign(code)
	case "assign-list":
		return assigns(code)
	case "ret":
		return ret(code)
	case "control-statement":
		return control(code)
	case "use":
		return compileUse(code)
	case "use-list":
		return useList(code)
	default:
		return statements(code.statements)
	}
}
