let buf sys.buffer(3)
sys.stdin(buf)
sys.stdout(buf)

// type alias buffer system
// type alias newBuffer fn (int) buffer
// type alias bufferCap fn (buffer) int
// type alias bufferLen fn (buffer) int
// type alias bufferContent fn (buffer, int, int) string
// type alias stream fn~ (buffer) error
// type alias stdin stream
// type alias stdout stream

// let newBuffer     sys.buffer
// let bufferCap     sys.cap
// let bufferLen     sys.len
// let bufferContent sys.content
// let stdin         sys.stdin
// let stdout        sys.stdout

// let buf newBuffer(1 << 9)
// for {
// 	if isError(stdin(buf)) {
// 		break
// 	}
//
// 	stdout(buf)
// }
//
// type copy fn~ (stream, stream) error
// fn~ copy(from, to) { // natural order
// 	let buf newBuffer(1 << 9)
// 	fn~ copyBuf() {
// 		let err stdin(buf)
// 		switch {
// 			case err == sys.eof:
// 				noError
// 			case isError(err):
// 				err
// 			default:
// 				stdout(buf)
// 				copyBuf()
// 		}
// 	}
//
// 	copyBuf()
// }
//
// copy(stdout, stderr)
