use . "lang"

export let (
	controlStatement enum()
	breakControl     controlStatement()
	continueControl  controlStatement()
)

export let (
	unaryOp    enum()
	binaryNot  unaryOp()
	plus       unaryOp()
	minus      unaryOp()
	logicalNot unaryOp()
)

export let (
	binaryOp    enum()
	binaryAnd   binaryOp()
	binaryOr    binaryOp()
	xor         binaryOp()
	andNot      binaryOp()
	lshift      binaryOp()
	rshift      binaryOp()
	mul         binaryOp()
	div         binaryOp()
	mod         binaryOp()
	add         binaryOp()
	sub         binaryOp()
	eq          binaryOp()
	notEq       binaryOp()
	less        binaryOp()
	lessOrEq    binaryOp()
	greater     binaryOp()
	greaterOrEq binaryOp()
	logicalAnd  binaryOp()
	logicalOr   binaryOp()
)

export let builtin {
	len:        "Len"
	isError:    "IsError"
	keys:       "Keys"
	format:     "Format"
	stdin:      "Stdin",
	stdout:     "Stdout"
	stderr:     "Stderr"
	string:     "String"
	has:        "Has"
	isBool:     "IsBool"
	isInt:      "IsInt"
	isFloat:    "IsFloat"
	isString:   "IsString"
	error:      "Error"
	panic:      "Panic"
	open:       "Open"
	close:      "Close"
	args:       "Args"
	parseAST:   "ParseAST"
	parseInt:   "ParseInt"
	parseFloat: "ParseFloat"
}

export fn flattenedStatements(itemType, listType, listProp, statements) {
	fn (
		type(s)   has("type", s) && contains(s.type, [itemType, listType])
		toList(s) s.type == itemType ? [s] : s[listProp]
	)

	return statements -> filter(type) -> map(toList) -> flat
}

// TODO
export fn getModuleName(path) path
