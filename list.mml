export fn (
	fold(f, i, l)  len(l) == 0 ? i : fold(f, f(l[0], i), l[1:])
	foldr(f, i, l) len(l) == 0 ? i : f(l[0], foldr(f, i, l[1:]))
	map(m, l)      fold(fn (c, r) [r..., m(c)], [], l)
	filter(p, l)   fold(fn (c, r) p(c) ? [r..., c] : r, [], l)
	contains(i, l) len(filter(fn (ii) ii == i, l)) > 0
)

export fn sort(less, l) len(l) == 0 ? [] : [
	(l[1:] -> filter(fn (i) !less(l[0], i)) -> sort(less))...
	l[0]
	(l[1:] -> filter(less(l[0])) -> sort(less))...
]
